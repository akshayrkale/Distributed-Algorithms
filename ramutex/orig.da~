import sys
import time
import os
class P(process):
    def setup(ps:set, nrounds:int, hm:dict,id:int):
      self.reqc = None
      self.waiting = set()
      self.replied = set()
      hm[self.id] = 1

    def cs(task):
      # to enter cs, enque and send request to all, then await replies from all
        --start
        reqc = logical_clock()
        send(('Request', reqc), to=ps)

        await(len(replied) == len(ps))

      # critical section
        task()

      # to exit cs, deque and send releases to all
        --release
        reqc = None
        send(('Reply', logical_clock()), to=waiting)
        --end
        waiting = set()
        replied = set()

    def run():
        def anounce():
            output("In cs!")
        for i in range(nrounds) :
            cs(anounce)
        send(('Done', self.id), to=ps)
        await(each(p in ps, has= received(('Done', p))))
        output("Terminating..",os.getpid())
        send(('Done', self.id), to=id)

    # when receiving requests from others, enque and reply
    def receive(msg=('Request', timestamp), from_=source):
        if (reqc == None or (timestamp, source) < (reqc, self.id)):
            send(('Reply', logical_clock()), to=source)
        else:
            waiting.add(source)

    def receive(msg=('Reply', c1), from_=source):
        if reqc is not None and c1 > reqc:
            replied.add(source)

def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrounds = int(sys.argv[2]) if len(sys.argv) > 2 else 1
    config(clock='Lamport')
    ps = new(P, num= nprocs)
    # setup the processes
    hm = {}
    hm['1'] = 2
    for p in ps: setup({p}, (ps-{p}, nrounds,hm,os.getpid()))
    # start the processes
    hm=start(ps)
    def receive(msg=('Done', c1), from_=source):

